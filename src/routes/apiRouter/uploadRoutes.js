import { Router } from 'express';
import multer from 'multer';
const router = Router();
import os from 'os';
import fs from 'fs';
import path from 'path';
import cloudinary from 'cloudinary';
import encodeStr from '../../utils/encodeStr';
import * as ApiErrors from '../../errors';
import mediaValidate from '../../validate/mediaValidate';
import Model from '../../models/models';
import models from '../../entity/index';
import ErrorHelpers from '../../helpers/errorHelpers';
import mediaController from '../../controller/mediaController';
var formidable = require('formidable');
var uploads = {};
cloudinary.config({
	cloud_name: 'dnhw0fqtx',
	api_key: '385388229282542',
	api_secret: 'pYq_kJ34-BQ1DCvpielwd1IiSQA',
});
const { media } = models;
const ROOT_DIR = process.cwd();
const ROOT_DIR_CONTAINER = `${ROOT_DIR}/uploads`;
// SET STORAGE
const storage = multer.diskStorage({
	destination: function (req, file, cb) {
		cb(null, 'uploads');
	},
	filename: function (req, file, cb) {
		const originalname = encodeStr(file.originalname);
		cb(null, file.fieldname + '-' + originalname);
	},
});

const readFile = (fileName) =>
	new Promise((resolve, reject) => {
		try {
			// eslint-disable-next-line no-unused-vars

			console.log(`File ${fileName} exists.`);
			fs.readFile(fileName, (err, data) => {
				if (err) reject(err);
				else resolve(data);
			});
		} catch (error) {
			reject(error);
		}
	});

const fileFilter = (req, file, cb) => {
	const regex = /^video/;
	// // console.log("file.mimetype: ", regex.test(file.mimetype));
	if (file.mimetype === 'image/jpeg' || file.mimetype === 'image/png' || regex.test(file.mimetype)) {
		cb(null, true);
	} else {
		cb(
			new ApiErrors.BaseError({
				statusCode: 202,
				type: 'crudError',
				error: 'Không hỗ trợ định dạng',
			}),
			false
		);
	}
};

const upload = multer({
	storage: storage,
	fileFilter,
	limits: 1024 * 1024 * 1024,
});
function waitForAllUploads(id, err, image) {
	uploads[id] = image;
	var ids = Object.keys(uploads);
	if (ids.length === 6) {
		console.log();
		console.log('**  uploaded all files (' + ids.join(',') + ') to cloudinary');
		performTransformations();
	}
}

function performTransformations() {
	console.log();
	console.log();
	console.log();
	console.log('>> >> >> >> >> >> >> >> >> >>  Transformations << << << << << << << << << <<');
	console.log();
	console.log('> Fit into 200x150');
	console.log(
		'> ' + cloudinary.url(uploads.pizza2.public_id, { width: 200, height: 150, crop: 'fit', format: 'jpg' })
	);

	console.log();
	console.log('> Eager transformation of scaling to 200x150');
	console.log('> ' + cloudinary.url(uploads.lake.public_id, eager_options));

	console.log();
	console.log('> Face detection based 200x150 thumbnail');
	console.log(
		'> ' +
			cloudinary.url(uploads.couple.public_id, {
				width: 200,
				height: 150,
				crop: 'thumb',
				gravity: 'faces',
				format: 'jpg',
			})
	);

	console.log();
	console.log('> Fill 200x150, round corners, apply the sepia effect');
	console.log(
		'> ' +
			cloudinary.url(uploads.couple2.public_id, {
				width: 200,
				height: 150,
				crop: 'fill',
				gravity: 'face',
				radius: 10,
				effect: 'sepia',
				format: 'jpg',
			})
	);

	console.log();
	console.log("> That's it. You can now open the URLs above in a browser");
	console.log('> and check out the generated images.');
}

router.post('/uploadfile', async (req, res, next) => {
	try {
		var form = await new formidable.IncomingForm();
		await form.parse(req, async (err, fields, files) => {
			if (!err) {
				const { userId, postId } = fields;
				if (files.myFiles.type.includes('video')) {
					cloudinary.v2.uploader.upload(
						files.myFiles.path,
						{
							resource_type: 'video',
							public_id: 'my_folder/my_sub_folder/dog_closeup',
							chunk_size: 6000000,
							eager: [
								{ width: 300, height: 300, crop: 'pad', audio_codec: 'none' },
								{ width: 160, height: 100, crop: 'crop', gravity: 'south', audio_codec: 'none' },
							],
							eager_async: true,
							eager_notification_url: 'https://mysite.example.com/notify_endpoint',
						},
						async function (error, result) {
							if (error) {
								console.warn(error);
								res.send(error);
							}
							const entity = {
								userId,
								postId,
								type: files.myFiles.type,
								path: result.url,
							};
							let objReturn = await Model.create(media, entity).catch((err) => {
								ErrorHelpers.errorThrow(error, 'crudError', 'postServices');
							});
							if (objReturn.dataValues) {
								res.send(objReturn);
							}
						}
					);
				} else if (files.myFiles.type.includes('image')) {
					await cloudinary.v2.uploader.upload(
						files.myFiles.path,
						{ tags: 'basic_sample' },
						async function (err, image) {
							console.log('** Image Upload');
							if (err) {
								console.warn(err);
								res.send(err);
							}
							console.log("* public_id for the uploaded image is generated by Cloudinary's service.");
							// console.log('* ' + image.public_id);
							console.log('* ' + image);
							const entity = {
								userId,
								postId,
								type: files.myFiles.type,
								path: image.url,
							};
							let objReturn = await Model.create(media, entity).catch((err) => {
								ErrorHelpers.errorThrow(error, 'crudError', 'postServices');
							});
							if (objReturn.dataValues) {
								waitForAllUploads(objReturn.dataValues.id, err, image);
								res.send(objReturn);
							}
						}
					);
				}
			} else {
				throw new ApiErrors.BaseError({
					statusCode: 202,
					type: 'uploadFileFaild',
					error: 'Có lỗi trong lúc upload',
				});
			}
		});
	} catch (error) {
		console.log('error: ', error);
	}
});
router.post('/user/changeAvatar', async (req, res, next) => {
	try {
		var form = await new formidable.IncomingForm();
		await form.parse(req, async (err, fields, files) => {
			if (!err) {
				await cloudinary.v2.uploader.upload(
					files.myFiles.path,
					{ tags: 'basic_sample' },
					function (err, image) {
						console.log('** Image Upload');
						if (err) {
							console.warn(err);
							res.send(err);
						}
						res.send({
							path: image.url,
						});
					}
				);
			} else {
				throw new ApiErrors.BaseError({
					statusCode: 202,
					type: 'uploadFileFaild',
					error: 'Có lỗi trong lúc upload',
				});
			}
		});
	} catch (error) {
		res.send(error);
	}
});
router.post('/uploadMultifile', upload.array('myFiles', 12), (req, res, next) => {
	const file = req.files;
	// console.log("req: ", file);
	if (!file) {
		throw new ApiErrors.BaseError({
			statusCode: 202,
			type: 'crudError',
			error: 'Có lỗi trong lúc upload',
		});
	}
	res.send(file);
});
router.get('/getFile/*', (req, res, next) => {
	try {
		// recordStartTime.call(req);
		let filePath = req.path.replace(/\/+\//g, '/');
		filePath = filePath.replace('/getFile/', '');
		readFile(`${ROOT_DIR_CONTAINER}/${filePath}`)
			.then((data) => {
				const file = Buffer.from(data, 'base64');

				console.log('file: ', file);
				res.writeHead(200, {
					'Content-Type': `*`,
					'Content-Length': file.length,
					'Cache-Control': 'public, max-age=7776000',
					Expires: new Date(Date.now() + 7776000000).toUTCString(),
				});
				res.end(file);
			})
			.catch((error) => {
				console.log('readFile catch: ', error);
				res.send({
					err: error,
				});
			});
	} catch (error) {
		next(error);
	}
});
router.get('/getListFile', mediaValidate.authenFilter, mediaController.get_list);
router.delete('/:id', mediaController.delete);

export default router;
